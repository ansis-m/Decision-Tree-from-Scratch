type: edu
files:
- name: main.py
  visible: true
  text: |
    # write your code here
  learner_created: false
- name: test/__init__.py
  visible: false
  learner_created: false
- name: test/data_stage7.csv
  visible: false
  learner_created: false
- name: test/tests.py
  visible: false
  text: |
    from hstest import *
    import ast

    ANSWER = [0.3, 'Fare', 8.662, [1, 2], [0, 3, 4, 5, 6, 7, 8, 9]]


    class SplitNumTest(StageTest):

        @dynamic_test
        def test(self):
            pr = TestedProgram()
            pr.start()
            if not pr.is_waiting_input():
                raise WrongAnswer("You program should input the path to the file")
            output = pr.execute("test/data_stage7.csv").strip().replace(", ", ",")
            output = [x.strip() for x in output.split()]
            if len(output) != 5:
                raise WrongAnswer("Your answer should contain five items split by a space: a float, a string, an integer, "
                                  "and two lists.")

            # checking the first item
            try:
                user_gini = float(output[0])
            except Exception:
                raise WrongAnswer("The first value should be a float.")
            if user_gini != ANSWER[0]:
                raise WrongAnswer("Wrong Gini score (the first item in your answer).")

            # checking the second item
            if output[1] != ANSWER[1]:
                raise WrongAnswer("Wrong threshold feature (the second item in your answer).")

            # checking the third item
            try:
                user_split_value = ast.literal_eval(output[2])
            except Exception:
                raise WrongAnswer("The third value should be either an integer or a float.")
            if not isinstance(user_split_value, (int, float)):
                raise WrongAnswer("The third value should be either an integer or a float.")
            err = ANSWER[2] * 0.02
            if not ANSWER[2] - err <= user_split_value <= ANSWER[2] + err:
                raise WrongAnswer("Wrong threshold value (the third item in your answer).")

            # checking the forth and the fifth item
            for i, ans, node in zip([0, 1], output[3:], ["left", "right"]):
                index_from = ans.find('[')
                index_to = ans.find(']')
                list_str = ans[index_from: index_to + 1]
                try:
                    user_list = ast.literal_eval(list_str)
                except Exception:
                    return CheckResult.wrong(
                        f"Seems that the {4 + i}th item of your output is in wrong format. The list is expected.")

                if not isinstance(user_list, list):
                    return CheckResult.wrong(f'Print the {4 + i}th item as a list')
                if user_list != ANSWER[3 + i]:
                    raise WrongAnswer(f"Wrong list of {node} node indexes (the {4 + i}th item in your answer).")

            return CheckResult.correct()


    if __name__ == '__main__':
        SplitNumTest().run_tests()
  learner_created: false
- name: tests.py
  visible: false
  text: |-
    from test.tests import SplitNumTest

    if __name__ == '__main__':    SplitNumTest().run_tests()
  learner_created: false
- name: test/data_stage31.csv
  visible: true
  learner_created: true
- name: test/data_stage2.csv
  visible: true
  learner_created: true
- name: Digraph.gv
  visible: true
  text: "digraph {\n\t2315927277632 [label=\"Feature Sex == 0?\"]\n\t2315927561072\
    \ [label=\"Feature Pclass == 1?\"]\n\t2315927563616 [label=\"Feature Parch ==\
    \ 2?\"]\n\t2315927560352 [label=\"Prediction: 1\"]\n\t2315927563616 -> 2315927560352\
    \ [label=True]\n\t2315927669248 [label=\"Feature SibSp == 0?\"]\n\t2315927667472\
    \ [label=\"Prediction: 0\"]\n\t2315927669248 -> 2315927667472 [label=True]\n\t\
    2315927668576 [label=\"Prediction: 0\"]\n\t2315927669248 -> 2315927668576 [label=False]\n\
    \t2315927563616 -> 2315927669248 [label=False]\n\t2315927561072 -> 2315927563616\
    \ [label=True]\n\t2315927667712 [label=\"Feature Parch == 1?\"]\n\t2315927562944\
    \ [label=\"Prediction: 0\"]\n\t2315927667712 -> 2315927562944 [label=True]\n\t\
    2315927670016 [label=\"Feature Parch == 2?\"]\n\t2315927668288 [label=\"Prediction:\
    \ 0\"]\n\t2315927670016 -> 2315927668288 [label=True]\n\t2315927697248 [label=\"\
    Feature Pclass == 3?\"]\n\t2315927733488 [label=\"Feature Parch == 0?\"]\n\t2315927735408\
    \ [label=\"Feature SibSp == 0?\"]\n\t2315927734736 [label=\"Prediction: 0\"]\n\
    \t2315927735408 -> 2315927734736 [label=True]\n\t2315927734640 [label=\"Prediction:\
    \ 0\"]\n\t2315927735408 -> 2315927734640 [label=False]\n\t2315927733488 -> 2315927735408\
    \ [label=True]\n\t2315927699168 [label=\"Prediction: 0\"]\n\t2315927733488 ->\
    \ 2315927699168 [label=False]\n\t2315927697248 -> 2315927733488 [label=True]\n\
    \t2315927696864 [label=\"Prediction: 0\"]\n\t2315927697248 -> 2315927696864 [label=False]\n\
    \t2315927670016 -> 2315927697248 [label=False]\n\t2315927667712 -> 2315927670016\
    \ [label=False]\n\t2315927561072 -> 2315927667712 [label=False]\n\t2315927277632\
    \ -> 2315927561072 [label=True]\n\t2315927563664 [label=\"Feature Pclass == 3?\"\
    ]\n\t2315927668528 [label=\"Feature SibSp == 0?\"]\n\t2315927561600 [label=\"\
    Prediction: 1\"]\n\t2315927668528 -> 2315927561600 [label=True]\n\t2315927668624\
    \ [label=\"Prediction: 0\"]\n\t2315927668528 -> 2315927668624 [label=False]\n\t\
    2315927563664 -> 2315927668528 [label=True]\n\t2315927670064 [label=\"Feature\
    \ Pclass == 2?\"]\n\t2315927667808 [label=\"Prediction: 1\"]\n\t2315927670064\
    \ -> 2315927667808 [label=True]\n\t2315927667184 [label=\"Prediction: 1\"]\n\t\
    2315927670064 -> 2315927667184 [label=False]\n\t2315927563664 -> 2315927670064\
    \ [label=False]\n\t2315927277632 -> 2315927563664 [label=False]\n}\n"
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/20215#comment
status: Solved
feedback:
  message: Congratulations!
  time: "Sat, 23 Sep 2023 10:11:02 UTC"
record: -1
